<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/nss4/Downloads/musichistory.db" foreign_keys="1"/><window><current_tab id="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2765"/><expanded_item id="0" parent="1"/><expanded_item id="0" parent="0"/><expanded_item id="3" parent="0"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="Album"/><default_encoding codec=""/><browsetable_info data="AAAABQAAAB4AcwBxAGwAaQB0AGUAXwBzAGUAcQB1AGUAbgBjAGUAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wAAAAD/////AAAACABTAG8AbgBnAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8AAAAA/////wAAAAoARwBlAG4AcgBlAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8AAAAA/////wAAAAwAQQByAHQAaQBzAHQAAAAAAAAAAAAAAAEAAAACAAAA1QAAAAAAAAAAAP//////////AAAAAP////8AAAAKAEEAbABiAHUAbQAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AAAAAP////8="/></tab_browse><tab_sql><sql name="SQL 1">-- 1. Query all of the entries in the Genre table

SELECT * FROM Artist;

-- 2. Using the INSERT statement, add one of your favorite artists to the Artist table.

INSERT INTO Artist 
VALUES
(null, 'Red Hot Chili Peppers', 1983);

--3. Using the INSERT statement, add one, or more, albums by your artist to the Album table.

INSERT INTO Album
VALUES
(null, &quot;Stadium Arcadium&quot;, &quot;01/01/2006&quot;, 5018, &quot;RHCP&quot;, 33, 2);

--4. Using the INSERT statement, add some songs that are on that album to the Song table.

INSERT INTO Song
VALUE
(null, &quot;Dani California&quot;, 723, &quot;01/01/2006&quot;, 2, 33, 23);

--5. Write a SELECT query that provides the song titles, album title, and artist name for all of the data you just entered in. Use the LEFT JOIN keyword sequence to connect the tables, and the WHERE keyword to filter the results to the album and artist you added.

SELECT s.Title, a.Title, x.ArtistName
FROM Song s
LEFT JOIN Album a ON s.AlbumId = a.AlbumId
LEFT JOIN Artist x ON s.ArtistId = x.ArtistId
WHERE ArtistName = &quot;Red Hot Chili Peppers&quot;;

-- 6. Using SELECT and LEFT JOIN, write a query that displays the song title, the song duration, the album label, and the genre name for every song.

SELECT s.Title, a.Label, g.Label, SongLength
FROM Song s
LEFT JOIN Album a ON s.AlbumId = a.AlbumId
LEFT JOIN Genre g ON s.GenreId = g.GenreId;

--7. Using a WHERE clause, modify the previous query to only show the information for songs that have a duration of 250 or greater.

SELECT s.Title, a.Label, g.Label, SongLength
FROM Song s
LEFT JOIN Album a ON s.AlbumId = a.AlbumId
LEFT JOIN Genre g ON s.GenreId = g.GenreId
WHERE SongLength &gt;= 250;

-- 8. Write a SELECT statement to display how many songs exist for each album. You'll need to use the COUNT() function and the GROUP BY keyword sequence.

SELECT s.AlbumId, a.Title, COUNT(s.Albumid) &quot;Total Songs&quot;
FROM Song s
JOIN Album a ON s.AlbumId = a.AlbumId
GROUP BY s.AlbumId;

--9. Write a SELECT statement to display how many songs exist for each artist. You'll need to use the COUNT() function and the GROUP BY keyword sequence.

SELECT s.ArtistId, a.ArtistName, COUNT(s.ArtistId) &quot;Total Songs&quot;
FROM Song s
JOIN Artist a ON s.ArtistId = a.ArtistId
GROUP BY s.ArtistId;

--10. Write a SELECT statement to display how many songs exist for each genre. You'll need to use the COUNT() function and the GROUP BY keyword sequence.

SELECT g.Label, COUNT(s.GenreId) &quot;Total Songs&quot;
FROM Song s
JOIN Genre g ON s.GenreId = g.GenreId
GROUP BY s.GenreId;

--11. Write a SELECT statement to display how many artists exist for each genre. You'll need to use the COUNT() function and the GROUP BY keyword sequence.

SELECT g.Label, a.GenreId, Count(a.ArtistId)
FROM
(
    SELECT s.GenreId, s.ArtistId
    FROM Song s
    GROUP BY s.GenreId, s.ArtistId
    
    UNION
    
    SELECT a.GenreId, a.ArtistId
    FROM Album a
    GROUP BY a.GenreId, a.ArtistId
) a
LEFT JOIN Genre g on g.GenreId = a.GenreId
GROUP BY a.GenreId;

--12. Using MAX() function, write a select statement to find the album with the longest duration. The result should display the album title and the duration.

SELECT MAX(AlbumLength), Title
From Album;

--13. Using MAX() function, write a select statement to find the song with the longest duration. The result should display the song title and the duration.

SELECT MAX(SongLength), Title
FROM Song;

--14. Modify the previous query to also display the title of the album.

SELECT s.AlbumId, s.Title, a.Title, MAX(SongLength)
FROM Song s
JOIN Album a ON a.AlbumId = s.AlbumId;</sql><current_tab id="0"/></tab_sql></sqlb_project>
